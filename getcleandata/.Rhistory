if(is.null(inversematrix) == TRUE){
originalmatrix <- x$getOriMtrx()
inversematrix <- solve(originalmatrix)
x$storeInvMtrx(inversematrix)
# if cacluated already and assigned,
# just get the cached inversematrix
}else{
message ("getting cached data")
}
## Return a matrix that is the inverse of 'x'
return(inversematrix)
}
source('~/Documents/datasciencecoursera/rprogramming/ProgrammingAssignment2/cachematrix.R')
?matrix
matrix(1:4, 2,2)
m <- matrix(1:4,2,2)
makeCacheMatrix(m)
## a pair of functions that cache the inverse of a matrix.
## creates a special "matrix" object that can cache its inverse
## argument 'x' is original matrix to be calculated
makeCacheMatrix <- function(x = matrix()) {
# empty storage for inversematrix
inversematrix <- NULL
# store inversematrix after solve calculation or whatever outside do
storeInvMtrx <- function(invmtrx){
inversematrix <<- invmtrx
}
# get inversematrix for cache
getInvMtrx <- function() inversematrix
# get original matrix for solve calculation
# original matrix is argument 'x' in this function
getOriMtrx <- function() x
# renew original matrix (inversematrix needed to be reset when renewing original)
# original matrix is argument 'x' in this function
renewOriMtrx <- function(newmtrx){
inversematrix <<- NULL
x <<- newmtrx
}
# return list of functions to be used outside. name every elements to use readily
list(storeInvMtrx = storeInvMtrx, getInvMtrx = getInvMtrx,
getOriMtrx = getOriMtrx, renewOriMtrx )
}
## computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
## argument 'x' is special matrix object(consisting of original matrix and
## related functions) made already
cacheSolve <- function(x, ...) {
# get cached inversematrix
inversematrix <- x$getInvMatrx()
# if not calculated so that no value for inversematrix,
# calculate and assign
if(is.null(inversematrix) == TRUE){
originalmatrix <- x$getOriMtrx()
inversematrix <- solve(originalmatrix)
x$storeInvMtrx(inversematrix)
# if cacluated already and assigned,
# just get the cached inversematrix
}else{
message ("getting cached data")
}
## Return a matrix that is the inverse of 'x'
return(inversematrix)
}
makeCacheMatrix(m)
a <- makeCacheMatrix(m)
cacaheSolve(a)
cacheSolve(a)
## a pair of functions that cache the inverse of a matrix.
## creates a special "matrix" object that can cache its inverse
## argument 'x' is original matrix to be calculated
makeCacheMatrix <- function(x = matrix()) {
# empty storage for inversematrix
inversematrix <- NULL
# store inversematrix after solve calculation or whatever outside do
storeInvMtrx <- function(invmtrx){
inversematrix <<- invmtrx
}
# get inversematrix for cache
getInvMtrx <- function() inversematrix
# get original matrix for solve calculation
# original matrix is argument 'x' in this function
getOriMtrx <- function() x
# renew original matrix (inversematrix needed to be reset when renewing original)
# original matrix is argument 'x' in this function
renewOriMtrx <- function(newmtrx){
inversematrix <<- NULL
x <<- newmtrx
}
# return list of functions to be used outside. name every elements to use readily
list(storeInvMtrx = storeInvMtrx, getInvMtrx = getInvMtrx,
getOriMtrx = getOriMtrx, renewOriMtrx )
}
## computes the inverse of the special "matrix" returned by makeCacheMatrix above.
## If the inverse has already been calculated (and the matrix has not changed),
## then the cachesolve should retrieve the inverse from the cache.
## argument 'x' is special matrix object(consisting of original matrix and
## related functions) made already
cacheSolve <- function(x, ...) {
# get cached inversematrix
inversematrix <- x$getInvMtrx()
# if not calculated so that no value for inversematrix,
# calculate and assign
if(is.null(inversematrix) == TRUE){
originalmatrix <- x$getOriMtrx()
inversematrix <- solve(originalmatrix)
x$storeInvMtrx(inversematrix)
# if cacluated already and assigned,
# just get the cached inversematrix
}else{
message ("getting cached data")
}
## Return a matrix that is the inverse of 'x'
return(inversematrix)
}
cacheSolve(a)
cacheSolve(a)
a[[3]]
a[[4]](m)
m1<- matrix(c(5,2,3,9),2,2)
a[[4]](m1)
cacheSolve(a)
cacheSolve(a)
lapply(m, mean)
x<- list(m, 1,3)
lapply(x, mean)
x<- list(m, 1, 3, "cha")
lapply(x, mean)
runif(5)
runif(5)
lapply(x, runif)
x<- c(1,4,2)
lapply(x, runif)
x <- list("cha", 1,5,3)
lapply(x, runif)
sapply(x, runif)
xM- list(1:4, 3,2,1)
x<- list(1:4, 3,2,3)
x
sapply(x, mean)
class(sapply(x, mean))
lapply(x, mean)
x<- matrix(repeat(1:10,20),20,10)
?repeat
?
""
?rep
x<- matrix(rep(1:10,20),20,10)
x
x<- matrix(rep(1:10,20),10,20)
x
apply(x,2,mean)
apply(x,1,mean)
apply(x,2,sum)
apply(x,1,sum)
rowsum(x)
rowSums(x)
rowSums(airquality)
colSums(airquality)
colSums(airquality, na.rm=TRUE)
x <- matrix(rnorm(200, 5, 1), 200, 10)
x
x <- matrix(rnorm(200, 5, 1), 20, 10)
apply(x, 2, quantile)
?quantile
apply(x, 2, quantile, probs = 8)
apply(x, 2, quantile, probs = 0.88)
apply(x, 2, quantile, probs = c(0.25, 0.75))
apply(x, 2, quantile, probs = c(0.80))
rnorm(2*2*10)
?array
a<- array(rnorm(40), c(2,2,10))
a
a[1,2]
a[1]
1[c(1,2)]
a[c(1,2)]
a[c(1,2,1)]
a[c(1,2,1,1)]
a[c(1,3)]
a[c(1,4)]
a[c(1,5)]
a[c(2,1)]
a[c(3,1)]
a[1]
a[[1]]
a
a[,1]
a[10]
apply(a,1,mean)
apply(a,c(2,1),mean)
a <- array(rep(1:4,10),c(2,2,10))
a
apply(a,c(2,1),mean)
apply(a,1,mean)
apply(a,2,mean)
apply(a,3,mean)
apply(a,4,mean)
apply(a,c(1,2),mean)
apply(a,c(1,3),mean)
apply(a,c(2,3),mean)
apply(a,c(1,2,3),mean)
a[1]
a[30]
a[31]
a[32]
class(rep(:3))
class(rep(1:3))
mapply(matrix, list(1:10,1:20,1:30), c(2,5), c(4,5),c(5,6))
mapply(matrix, list(1:10,1:20,1:30), c(c(2,5), c(4,5),c(5,6))
)
mapply(matrix, list(1:10,1:20,1:30), list(c(2,5), c(4,5),c(5,6)))
mapply(rnorm, 1:5, 1:5,2)
libarary
library
library()
datasets()
s <- split(airquailty, airquality$Month)
s <- split(airquailty, airquality$Month)
airquality
s <- split(airquailty, airquality$Month)
s <- split(airqualiity, airquality$Month)
s <- split(airquality, airquality$Month)
s
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[,c("Ozone", "Solar.R", "Wind")], na.rm=TRUE))
?gl
f1 <- gl(2,5)
f2 <- gl(5,2)
interaction(f1,f2)
str(interaction)
?interaction
x
class(x)
x<- 1:10
split(x, list(f1,f2))
class(x)
split(1:5, f1)
?spilt
?split
str(split)
interaction(f1,f2)
f1
?interaction
summary(lm)
summary(iris)
str(iris)
str(str)
str(lm)
summarY9str
summary(str)
str(iris)
summary(iris)
str(apply)
x<- rnorm(100,2,4)
str(x)
summary(x)
f <- gl(40,10)
str(f)
summary9f
summary(f)
library(datasets)
head(airquality)
str(airquality)
m <- matrix(rnorm(100),10,10)
strm(m)
str(m)
s <- split(airquality, airquality$Month)
str(s)
set.seed(2)
rnorm(5)
rnorm(5)
set.seed(1)
rnorm(5)
set.seed(2)
rnorm(5)
rnorm(10)
?rpois
set.seed(20)
x <- rnorm(100)
e <- rnorm(100,0,2)
y<- 0.5+2*x+e
plot(x,y)
x <- rbinom(100,1,0.5)
plot(x,y)
summary(y)
set.seed(1
)
x<- rnorm(100)
log.mu <- 0.5 + 0.3*x
y <- rpois(100, exp(log.mu))
summar(y)
summary(y)
plot(x,y)
?rpois
rpois(10,1)
library("swirl")
swirl()
x
x[1:10]
x[is.na[x]]
x[is.na(x)]
y <- x[!is.na(x)]
y
y[y>0]
x[x>0]
x[!is.na(x)& x>0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2, 10)]
vect <- c(foo = 11, bar = 2, norf = NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo", "bar", "norf")
idenctical(vect)
identical(vect)
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
str(flags)
head(flags)
names(flags)
dim(flags)
viewinfO()
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
clas_vect <- sapply(dimnames(flags), class)
clas_vect <- sapply(flags, class)
cls_vect <- sapply(flags, class)
calss(cls_vect)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[,11:17]
head(flag_colors)
lapply(flag_colors, sum)
library(swirl)
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
dimnames(mydf)
head(mydf)
library(dplyr)
packageVersion("R")
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
tbl_df
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country : ip_id)
select(cran, country : r_arch)
print(cran)
cran
select(cran, -time)
select(cran, -(x:size))
select(cran, -(X:size))
-5:20
-(5:20)
select(cran, -(X:size))
filter(cran, package =="swirl")
filter(cran, r_version =="3.1.1", country=="US")
summarize(cran)
summary(cran)
str(cran)
?Comparison
filter(cran, country = "IN", r_version <= "3.0.2")
filter(cran, country = "IN", r_version == "3.0.2", r_version < "3.0.2")
filter(cran, country = "IN", r_version == "3.0.2")
filter(cran, country == "IN", r_version <= "3.0.2")
filter(cran, country =="US"| country =="IN")
filter(vran, size<100500, r_os == "linux-gnu")
filter(cran, size<100500, r_os == "linux-gnu")
filter(cran, size>100500, r_os == "linux-gnu")
is.na(c(3,5,NA, 10))
!is.na(c(3,5,NA, 10))
filter(cran, !is.na(r_version))
select(cran2, size:ip_id)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size/2^20)
mutate(cran3, size_mb = size/2^20, size_gb = size_mb/2^10)
mutate(cran3, correct_size = size+1000)
summarize(cran3, avg_bytes = mean(size))
summarize(cran, avg_bytes = mean(size))
library(dplyr)
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
# Compute four values, in the following order, from
# the grouped data:
#
# 1. count = n()
# 2. unique = n_distinct(ip_id)
# 3. countries = n_distinct(country)
# 4. avg_bytes = mean(size)
#
# A few thing to be careful of:
#
# 1. Separate arguments by commas
# 2. Make sure you have a closing parenthesis
# 3. Check your spelling!
# 4. Store the result in pack_sum (for 'package summary')
#
# You should also take a look at ?n and ?n_distinct, so
# that you really understand what is going on.
pack_sum <- summarize(by_package,
count = n() ,
unique = n_distinct(ip_id),
countries = n_distinct(country) ,
avg_bytes = mean(size))
submit()
reset()
pack_sum
quantile(pack_sum$count, probs = 0.99)
top_counts<- filter(pack_sum, count>679)
top_counts
View(top_counts)
top_counts_sorted <- arrnage(top_counts, desc(count))
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
top_unique <- filter(pack_sum, unique >465)
View(top_unique)
arrange(top_unique, desc(unique))
top_unique_sorted <- arrnage(top_unique, desc(unique))
top_unique_sorted <- arrange(top_unique, desc(unique))
View(top_unique_sorted)
submit()
submit()
?chain
submit()
View(result3)
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
submit()
set.seed(13435)
X <- data.frame("var1" = sample(1:5), "var2" = sample(6:10), "var3" = sample(11:15))
X
sample(1:5)
X <- X[sample(1:5),]
X$var2[c(1,3)] = NA
X
X[,1]
x[,"var1"]
X[,"var1"]
X[1:2, "var2"]
X[(X$var1 <=3 & X$var3 >11),]
X[(X$var1 <=3 & X$var3 >11)]
X[(X$var1 <=3 |, X$var3 >15),]
X[(X$var1 <=3 | X$var3 >15),]
?which
X[which($var2>8),]
X[which(X$var2>8),]
sort(X$var1)
sort(X$var1, desc = TRUE)
sort(X$var1)
order(X$var1)
X
sort(X$var1)
sort(X$var1, decreasting = TRUE)
sort(X$var1, decreasing = TRUE)
sort(X$var2, na.last = TRUE)
order(X$var1)
X[order[X$var1),]]
X[order[X$var1),]
X[order(X$var1),]
X[sort(X$var1),]
library(plyr)
arrange(X, var1)
arrange(X, desc(var1))
X$var4 <- rnorm(5)
X
x[,5] = pnorm(5)
x[,5] = rnorm(5)
X[,5] = rnorm(5)
X
X<- cbind(X, rnorm(5))
X
file.lists()
list.files()
setwd("Documents")
list.files()
fileUrl <- "https://data.baltimorecity.gov/api/views/k5ry-ef3g/rows.csv?accessType=DOWNLOAD"
setwd("datasciencecoursera")
list.files(0)
list.files()
setwd("getcleandata")
